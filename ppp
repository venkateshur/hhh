import unittest
from unittest.mock import MagicMock, patch
from your_module import PatchRequestsUtil, CustomPyOpenSSLContext, CustomHTTPAdapter

class TestPatchRequestsUtil(unittest.TestCase):

    @patch('your_module.ssl_')
    @patch('your_module.sessions')
    def test_enable_string_certs(self, mock_sessions, mock_ssl):
        # Mocking necessary objects and attributes
        mock_ssl._is_key_file_encrypted = MagicMock()
        mock_ssl.SSLContext = MagicMock()
        mock_sessions.HTTPAdapter = MagicMock()

        # Call the static method
        PatchRequestsUtil.enable_string_certs()

        # Assert that necessary methods were called
        mock_ssl.SSLContext.assert_called_with(CustomPyOpenSSLContext)
        mock_sessions.HTTPAdapter.assert_called_with(CustomHTTPAdapter)

if __name__ == '__main__':
    unittest.main()
